## docs-> https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html
## Server
server:
  servlet:
    context-path: /lembretes-ws
  compression:
    enabled: false
    mime-types:
      - application/json
      - application/xml
      - text/html
      - text/xml
      - text/plain
      
## Spring
spring:
  main:
    allow-bean-definition-overriding: true
  thymeleaf:
    cache: false

## JPA    
  jpa:
    generate-ddl: true
    show-sql: true
    hibernate:
      ##drop n create table again, good for testing, comment this in production or change to validate,update
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 50
  
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: clientId.apps.googleusercontent.com
            clientSecret: secretId
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
   
  
##enterprise
wolfdev:
  securityEnabled: false
  schema-db: lembretes
  allowedOrigins: "*"
  compressRequest: false
  
##project
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect    
  main-path: http://example.com   
       